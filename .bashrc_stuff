## stuff to append to .bashrc

if command -v watchexec >/dev/null 2>&1; then
    alias we='watchexec'
fi
if command -v exa >/dev/null 2>&1; then
    alias ls='exa'
fi
if command -v docker-compose >/dev/null 2>&1; then
    alias dcomp='docker-compose'
fi
if command -v nvim >/dev/null 2>&1; then
    alias vim='nvim'
fi


alias l='ls'
# make destructive things interactive
alias ll='ls -l'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'

# work git
#WORK_GIT_KEY='secretkeyname'
#alias workgit="GIT_SSH_COMMAND='ssh -i ~/.ssh/$WORK_GIT_KEY' git"


set -o vi
export VISUAL=vim
export EDITOR="$VISUAL"
export TERM=xterm-256color

# postgres
# mac only
#PATH=$PATH:/Applications/Postgres.app/Contents/Versions/9.6/bin

# For node/npm, assumes node binaries have been unpacked into ~/bin/node
export PATH=$PATH:~/bin/node/bin
export PATH=$PATH:~/.node_modules/bin

# For rustup, to access any binaries install via `cargo install`
export PATH="$HOME/.cargo/bin:$PATH"

export PATH=$PATH:~/bin

# For rust-racer, if rust source is managed by rustup
#  `rustup component add rust-src`
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
# `rustup toolchain add nightly && cargo +nightly install racer`
export RACER_PATH="$(which racer)"

# For python/jedi ycm -- set the default location for the jedi env
# mac
#export PYTHON_JEDI_PATH="/Users/james/bin/envs/jedi/bin/python"
# linux
#export PYTHON_JEDI_PATH="/home/james/bin/envs/jedi/bin/python"

# For syntastic python -- set the default location for the flake8 env
# mac
#export PYTHON_FLAKE8_PATH="/Users/james/bin/envs/flake8/bin/flake8"
# linux
#export PYTHON_FLAKE8_PATH="/home/james/bin/envs/flake8/bin/flake8"

# FZF use ripgrep & ctrl-p to open in vim from the shell
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/objects"'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
bind -x '"\C-p": vim $(fzf);'

# For Go...
export GOPATH=$HOME/projects/go # default go working dir
export GOROOT=$GOPATH   # install location
export PATH=$PATH:$GOROOT/bin   # ^^
export PATH=$PATH:$GOPATH/bin   # ^^

# For boost
#export BOOST_ROOT="/home/james/.installs/boost_1_65_0"

# Put VMs on an external drive
#export VAGRANT_HOME=/media/james/sdstore/vagrant_home

#~ If for some reason you need to add repl readline support
# export PYTHONSTARTUP=$HOME/.pythonstartup.py

#~ ssh login notifications
# ~/.installs/pushlogin/ssh_login.py

#~ Git things:
#~ See https://github.com/git/git/tree/master/contrib/completion
# function __init_git_stuff {
#     # branch prompt
#     source ~/bin/git-prompt.sh
#     # branch completion -- may error out
#     source ~/bin/git-completions.bash
# }


#~ If we're in a plexed shell, set the mltplxr's session id
#plexed_id=""
#if [ "$STY" ]; then
#    IFS=. ID=(${STY})
#    plexed_id='|s.'${ID[0]}
#fi
#if [ "$TMUX" ]; then
#    plexed_id=$plexed_id'|t.'$(tmux display-message -p "#S")
#fi
#

#PS1='\[\e[1;32m\]${debian_chroot:+($debian_chroot)}\u@\h\[\e[93m\]${plexed_id}\[\e[1;32m\]:\[\e[1;34m\]\w\[\e[32m\]$(__git_ps1)\[\e[35m\]\$\[\e[0m\] '

#~ Pretty red root prompt
# PS1='\[\e[1;91m\]${debian_chroot:+($debian_chroot)}\u@\h:\[\e[1;34m\]\w\[\e[35m\]\$\[\e[0m\] '

# building static rust binaries
# docker pull clux/muslrust
# docker run -v $PWD:/volume -w /volume -t clux/muslrust cargo build
#musl-build() {
#  docker run \
#    -v cargo-cache:/root/.cargo \
#    -v "$PWD:/volume" -w /volume \
#    --rm -it clux/muslrust cargo build --release
#}

# auto-env mac
#source $(brew --prefix autoenv)/activate.sh

# git-completions may error out
#__init_git_stuff

